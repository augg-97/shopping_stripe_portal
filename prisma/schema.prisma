generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  email          String
  fullName       String
  profileImageId Int?
  coverImageId   Int?
  salt           String?
  passwordHashed String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  deletedAt      DateTime?
  coverImage     Media?    @relation("cover", fields: [coverImageId], references: [id])
  profileImage   Media?    @relation("profile", fields: [profileImageId], references: [id])

  @@unique([email, deletedAt], map: "unique_email_deletedAt_uniq")
  @@index([email], map: "User_email_key")
}

model Media {
  id           Int       @id @default(autoincrement())
  code         String
  url          String
  productId    Int?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  product      Product?  @relation(fields: [productId], references: [id])
  storeCover   Store[]   @relation("cover")
  storeProfile Store[]   @relation("profile")
  userCover    User[]    @relation("cover")
  userProfile  User[]    @relation("profile")
}

model Product {
  id         Int       @id @default(autoincrement())
  name       String
  descrition String
  info       String?
  stock      Int
  price      Int
  storeId    Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  media      Media[]
  store      Store     @relation(fields: [storeId], references: [id])
}

model Store {
  id             Int       @id @default(autoincrement())
  name           String
  profileImageId Int?
  coverImageId   Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  deletedAt      DateTime?
  product        Product[]
  coverImage     Media?    @relation("cover", fields: [coverImageId], references: [id])
  profileImage   Media?    @relation("profile", fields: [profileImageId], references: [id])
}
